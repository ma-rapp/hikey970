diff --git a/pkgs/apps/bodytrack/parsec/hikey-pthreads.bldconf b/pkgs/apps/bodytrack/parsec/hikey-pthreads.bldconf
new file mode 100644
index 00000000..9fa25475
--- /dev/null
+++ b/pkgs/apps/bodytrack/parsec/hikey-pthreads.bldconf
@@ -0,0 +1,31 @@
+#!/bin/bash
+#
+# gcc-pthreads.bldconf - file containing information necessary to build a
+#                        specific program of the PARSEC benchmark suite with
+#                        gcc and pthreads
+#
+# Copyright (C) 2007-2008 Princeton University
+# Written by Christian Bienia
+
+# Compilation and linking options.
+# This is the configuration we'll use to build the program. Each package of the
+# benchmark suite has such a file with information that will be added to the
+# global configuration. All variables set in the global configuration files can
+# be referenced here.
+
+
+# Package dependencies
+build_deps=""
+
+# Environment to use for configure script and Makefile
+build_env="CXXFLAGS=\"${CXXFLAGS} -fexceptions\""
+
+# Whether the build system supports only in-place compilation.
+# If TRUE, then all sources will be copied to the build directory before we
+# start building the package. Required for older build systems which don't
+# support VPATH.
+build_inplace="FALSE"
+
+# Arguments to pass to the configure script, if it exists
+build_conf="--enable-threads --disable-openmp --disable-tbb --build=x86_64-linux-gnu --host=aarch64-linux-gnu"
+
diff --git a/pkgs/apps/bodytrack/parsec/hikey.bldconf b/pkgs/apps/bodytrack/parsec/hikey.bldconf
new file mode 100644
index 00000000..aac80a7c
--- /dev/null
+++ b/pkgs/apps/bodytrack/parsec/hikey.bldconf
@@ -0,0 +1,7 @@
+#!/bin/bash
+
+# gcc.bldconf - configuration file for PARSEC
+
+# Default parallelization is pthreads
+source ${PARSECDIR}/pkgs/apps/bodytrack/parsec/hikey-pthreads.bldconf
+
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/AsyncIO.h b/pkgs/apps/bodytrack/src/TrackingBenchmark/AsyncIO.h
index 13ab3b16..de3f06c7 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/AsyncIO.h
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/AsyncIO.h
@@ -57,7 +57,7 @@ public:
 	{	mImageBuffer.resize(0); 
 	};
 
-	~AsyncImageLoader() {};
+	~AsyncImageLoader() noexcept {};
 
 	//thread code
 	void Run();
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/Makefile.in b/pkgs/apps/bodytrack/src/TrackingBenchmark/Makefile.in
index 97e2ea10..808eb26b 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/Makefile.in
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/Makefile.in
@@ -105,7 +105,7 @@ LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
 	$(AM_CXXFLAGS) $(CXXFLAGS)
 CXXLD = $(CXX)
 CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
-	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
+	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -all-static -o $@
 COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
 	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
 LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelPthread.cpp b/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelPthread.cpp
index 92ce0412..1b5aa0ea 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelPthread.cpp
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelPthread.cpp
@@ -231,7 +231,7 @@ bool TrackingModelPthread::GetObservation(float timeval)
 	return true;
 }
 
-TrackingModelPthread::~TrackingModelPthread()
+TrackingModelPthread::~TrackingModelPthread() noexcept
 {
 	delete IOthread;
 }
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelPthread.h b/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelPthread.h
index 3367bd9c..b75f9fa0 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelPthread.h
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/TrackingModelPthread.h
@@ -38,7 +38,7 @@ class TrackingModelPthread : public TrackingModel, public threads::Threadable {
 public:
 	//constructor
 	TrackingModelPthread(WorkPoolPthread &_workers);
-	~TrackingModelPthread();
+	~TrackingModelPthread() noexcept;
 
 	//Generate an edge map from the original camera image
 	void CreateEdgeMap(FlexImage8u &src, FlexImage8u &dst);
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/Mutex.cpp b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/Mutex.cpp
index 68aa9473..3c49b1d2 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/Mutex.cpp
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/Mutex.cpp
@@ -60,7 +60,7 @@ Mutex::Mutex() throw(MutexException) {
 #endif //HAVE_LIBPTHREAD
 }
 
-Mutex::~Mutex() throw(MutexException) {
+Mutex::~Mutex() noexcept {
 #if defined(HAVE_LIBPTHREAD)
   int rv;
 
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/Mutex.h b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/Mutex.h
index 5a4e60e3..a0d16e97 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/Mutex.h
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/Mutex.h
@@ -83,7 +83,7 @@ class Mutex: public LockType {
 
   public:
     Mutex() throw(MutexException);
-    ~Mutex() throw(MutexException);
+    ~Mutex() noexcept;
 
     //Enter a critical region
     void Lock() throw(MutexException);
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/RWLock.cpp b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/RWLock.cpp
index b6df8bc2..46b2c7f4 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/RWLock.cpp
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/RWLock.cpp
@@ -52,7 +52,7 @@ RWLock::RWLock() throw(RWLockException) {
 
 }
 
-RWLock::~RWLock() throw(RWLockException) {
+RWLock::~RWLock() noexcept {
   int rv;
 
   rv = pthread_rwlock_destroy(&l);
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/RWLock.h b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/RWLock.h
index bfdfa6a1..c8489c52 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/RWLock.h
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/RWLock.h
@@ -67,7 +67,7 @@ class RWLockUnknownException: public RWLockException {
 class RWLock: public RWLockType {
   public:
     RWLock() throw(RWLockException);
-    ~RWLock() throw(RWLockException);
+    ~RWLock() noexcept;
 
     //Enter a critical region for reading
     void ReadLock() throw(RWLockException);
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/WorkerGroup.cpp b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/WorkerGroup.cpp
index 33ed5c6f..748925f4 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/WorkerGroup.cpp
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/WorkerGroup.cpp
@@ -40,7 +40,7 @@ WorkerGroup::WorkerGroup(int nThreads) : cmd(THREADS_IDLE), workAvailable(workDi
 }
 
 //destructor
-WorkerGroup::~WorkerGroup() {
+WorkerGroup::~WorkerGroup() noexcept {
   delete workDoneBarrier;
   delete poolReadyBarrier;
 }
diff --git a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/WorkerGroup.h b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/WorkerGroup.h
index a5250b06..a09d4a7a 100644
--- a/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/WorkerGroup.h
+++ b/pkgs/apps/bodytrack/src/TrackingBenchmark/threads/WorkerGroup.h
@@ -85,7 +85,7 @@ class WorkerGroup: protected ThreadGroup, protected Runnable {
     //constructor
     WorkerGroup(int nThreads);
     //destructor
-    ~WorkerGroup();
+    ~WorkerGroup() noexcept;
 
     //Add a new cmd -> object/function mapping to the pool
     void RegisterCmd(int _cmd, Threadable &obj);
diff --git a/pkgs/apps/bodytrack/src/config.sub b/pkgs/apps/bodytrack/src/config.sub
index 1c366dfd..557a7c2b 100755
--- a/pkgs/apps/bodytrack/src/config.sub
+++ b/pkgs/apps/bodytrack/src/config.sub
@@ -304,7 +304,7 @@ case $basic_machine in
 	| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \
 	| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \
 	| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \
-	| arm-*  | armbe-* | armle-* | armeb-* | armv*-* \
+	| arm-*  | armbe-* | armle-* | armeb-* | armv*-* | aarch64 \
 	| avr-* \
 	| bfin-* | bs2000-* \
 	| c[123]* | c30-* | [cjt]90-* | c4x-* | c54x-* | c55x-* | c6x-* \
